<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Format of DOS 4.0-6.0 swappable data area</title>
</head>
<body background="../images/background_item.gif"><!--'"</title></head>-->
<script type="text/javascript">
////// Compete /////////////////////
__compete_code = '667f89f26d96c30e99728fe6a608804d';
(function () {
    var s = document.createElement('script'),
        d = document.getElementsByTagName('head')[0] ||
            document.getElementsByTagName('body')[0],
        t = 'https:' == document.location.protocol ? 
            'https://c.compete.com/bootstrap/' : 
            'http://c.compete.com/bootstrap/';
    s.src = t + __compete_code + '/bootstrap.js';
    s.type = 'text/javascript';
    s.async = 'async'; 
    if (d) { d.appendChild(s); }
})();


////// Quantcast  /////////////////////
function channValidator(chann) {
    return (typeof(chann) == 'string' && chann != '');
}

function lycosQuantcast(){
    var lb = "";
    if(typeof(cm_host) !== 'undefined' && channValidator(cm_host)){
        lb += cm_host.split('.')[0] + '.';
    }

    if(typeof(cm_taxid) !== 'undefined' && channValidator(cm_taxid)){
        lb += cm_taxid;
        lb = lb.replace('/','');
    } else {
        lb = lb.replace('.','');
    }
    return lb;
}

var _qevents = _qevents || [];

(function() {
    var elem = document.createElement('script');
    elem.src = (document.location.protocol == "https:" ? "https://secure" :"http://edge") + ".quantserve.com/quant.js";
    elem.async = true;
    elem.type = "text/javascript";
    var scpt = document.getElementsByTagName('script')[0];
    scpt.parentNode.insertBefore(elem, scpt);
})();

_qevents.push({
    qacct:"p-6eQegedn62bSo",
    labels:lycosQuantcast()
});

////// OwnerIQ  /////////////////////
var __oiq_pct = 50;
if( __oiq_pct>=100 || Math.floor(Math.random()*100/(100-__oiq_pct)) > 0 ) {
    var _oiqq = _oiqq || [];
    _oiqq.push(['oiq_addPageBrand', 'Lycos']);
    _oiqq.push(['oiq_addPageCat', 'Internet > Websites']);
    _oiqq.push(['oiq_addPageLifecycle', 'Intend']);
    _oiqq.push(['oiq_doTag']);

    (function() {
        var oiq = document.createElement('script'); oiq.type = 'text/javascript'; oiq.async = true;
        oiq.src = document.location.protocol + '//px.owneriq.net/stas/s/lycosn.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(oiq, s);
    })();
}



/////// Google Analytics ////////////
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-21402695-19']);
_gaq.push(['_setDomainName', 'tripod.com']);
_gaq.push(['_setCustomVar', 1, 'member_name', 'faydoc', 3]);
_gaq.push(['_trackPageview']);
(function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();


/////// Lycos Initialization ////////////
function getReferrer() {
    // Reads the referrer out of the cookie, if available.
    var all= this.document.cookie;
    if (all== '') return false;
    var cookie_name = 'REFERRER=';
    var start = all.lastIndexOf(cookie_name);
    if (start == -1) return false;  // referrer URL not found.
    start += cookie_name.length;
    var end = all.indexOf(';', start);
    if (end == -1) end = all.length;
    return all.substring(start, end);
}
function getQuery() {
    // Get the referrer search query from cookie, if available.
    var rfr = getReferrer();
    if (rfr == '') return false;
    var q = extractQuery(rfr, 'yahoo.com', 'p=');
    if (q) return q;
    q = extractQuery(rfr, '', 'q=');
    return q ? q : "";
}
function extractQuery(full, site, q_param) {
    var start = full.lastIndexOf(site);
    if (start == -1) return false;
    start = full.lastIndexOf(q_param);
    if (start == -1) return false;
    start += q_param.length;
    var end = full.indexOf('&', start);
    if (end == -1) end = full.length;
    return unescape(full.substring(start, end)).split(" ").join("+");
}

function generateHref(atag, template){
    atag.href=template.replace('_MYURL_', window.location.href.replace('http://', '')).replace('_MYTITLE_', 'Check%20out%20this%20Tripod%20Member%20site!'); 
}


var lycos_ad = Array();
var lycos_onload_timer;

var cm_role = "live";
var cm_host = "tripod.lycos.com";
var cm_taxid = "/memberembedded";
var tripod_member_name = "faydoc";
var tripod_member_page = "faydoc/structures/16/1690.htm";
var tripod_ratings_hash = "1372261819:f24262d6c8a2733217647c56d7864f52";

var lycos_ad_category = {"find_what":"reliv.com"};

var lycos_ad_remote_addr = "99.159.74.223";
var lycos_ad_www_server = "www.tripod.lycos.com";
var lycos_ad_track_small = "http://members.tripod.com/adm/img/common/ot_smallframe.gif?rand=865401";
var lycos_ad_track_served = "http://members.tripod.com/adm/img/common/ot_adserved.gif?rand=865401";
var lycos_search_query = getQuery();


////// Criteo /////////////////////
var cto_conf = { a:true, i: "294", c:"img", kw: "" } ;
(function (){
    var c = document.createElement("script"); c.type = "text/javascript"; c.async = true;
    c.src = "http://members.tripod.com/adm/partner/criteo_ld_kw.js";
    var s = document.getElementsByTagName("body")[0]; s.appendChild(c);
})(); 

</script>

<script type="text/javascript" src="http://scripts.lycos.com/catman/init.js"></script>
<script type="text/javascript"> 

(function(isV) {
    if (!isV) {
        return;
    }

    //this.lycos_search_query = lycos_get_search_referrer();
    var adMgr = new AdManager();
    var lycos_prod_set = adMgr.chooseProductSet();
    var slots = ["leaderboard", "leaderboard2", "toolbar_image", "toolbar_text", "smallbox", "top_promo", "footer2"];
    var adCat = this.lycos_ad_category;
    adMgr.setForcedParam('page', (adCat && adCat.dmoz) ? adCat.dmoz : 'member');

    if (this.lycos_search_query) {
        adMgr.setForcedParam("keyword", this.lycos_search_query);
    } 
    else if (adCat && adCat.find_what) {
        adMgr.setForcedParam('keyword', adCat.find_what);
    }

    for (var s in slots) {
        var slot = slots[s];
        if (adMgr.isSlotAvailable(slot)) {
            this.lycos_ad[slot] = adMgr.getSlot(slot);
        }
    }

    adMgr.renderHeader();
    adMgr.renderFooter();
}((function() {
    var w = 0, h = 0, minimumThreshold = 300;
    if (top == self) {
        return true;
    }

    if (typeof(window.innerWidth) == 'number' ) {
        w = window.innerWidth;
        h = window.innerHeight;
    }
    else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
        w = document.documentElement.clientWidth;
        h = document.documentElement.clientHeight;
    }
    else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
        w = document.body.clientWidth;
        h = document.body.clientHeight;
    }

    return ((w > minimumThreshold) && (h > minimumThreshold));
}())));
    
window.onload = function() {
    var f = document.getElementById("FooterAd");
    var b = document.getElementsByTagName("body")[0];
    b.appendChild(f);
    f.style.display = "block";
    document.getElementById('lycosFooterAdiFrame').src = '/adm/ad/footerAd.iframe.html';


    // DOM Injection Ad
    (function(isTrellix) {
        var e = document.createElement('iframe');
        e.style.border = '0';
        e.style.margin = 0;
        e.style.display = 'block';
        e.style.cssFloat = 'right';
        e.style.height = '254px';
        e.style.overflow = 'hidden';
        e.style.padding = 0;
        e.style.width = '300px';

        var getCommentNodes = function(regexPattern) {
            var nodes = {};
            var nodesA = [];
            var preferredNodesList = ['a', 'c', 'b'];

            (function getNodesThatHaveComments(n, pattern) {
                if (n.hasChildNodes()) {
                    if (n.tagName === 'IFRAME') {
                        return false;
                    }
                    for (var i = 0; i < n.childNodes.length; i++) {
                        if ((n.childNodes[i].nodeType === 8) && (pattern.test(n.childNodes[i].nodeValue))) {
                            var areaName = pattern.exec(n.childNodes[i].nodeValue)[1];
                            nodes[areaName] = n;
                        }
                        else if (n.childNodes[i].nodeType === 1) {
                            getNodesThatHaveComments(n.childNodes[i], pattern);
                        }
                    }
                }
            }(document.body, regexPattern));

            for (var i in preferredNodesList) {
                if (nodes[preferredNodesList[i]]) {
                    if (nodes[preferredNodesList[i]].parentNode.parentNode.parentNode.parentNode) {
                        nodesA.push(nodes[preferredNodesList[i]].parentNode.parentNode.parentNode.parentNode);
                    }
                }
            }

            return nodesA;
        }

        var properNode = null;
        var areaNodes = getCommentNodes(new RegExp('^area Type="area_(\\w+)"'));
        for (var i = 0; i < areaNodes.length; i++) {
            var a = parseInt(getComputedStyle(areaNodes[i]).width);
            if ((a >= 300) && (a <= 400)) {
                properNode = areaNodes[i];
                break;
            }
        }

        if ((isTrellix) && (properNode)) {
            e.src = '/adm/ad/injectAd.iframe.html';
            properNode.insertBefore(e, properNode.firstChild);
        }
        else {
            e.src = '/adm/ad/sliderAd.iframe.html';
            var sliderBlock = document.getElementById('lyslider-adblock-wrapper');
            var sliderHolder = document.getElementById('lyslider-adblock-holder');
            var sliderClose = document.getElementById('lyslider-adblock-close');
            sliderBlock.style.display = 'block';

            sliderClose.onclick = function() {
                sliderBlock.parentNode.removeChild(sliderBlock);
                return false;
            }

            var iframeOnload = function() {
                setTimeout((function sliiide() {
                    var s = (window.getComputedStyle) ? parseInt(getComputedStyle(sliderHolder).right) : parseInt(sliderHolder.currentStyle.right);
                    if (s <= 0) {
                        sliderHolder.style.right = (s + 6) + 'px';
                        setTimeout(sliiide, 10);
                    }
                    else {
                        sliderHolder.style.right = '0px';
                        sliderClose.style.display = 'block';
                    }
                }), 1000);
            }

            if (e.attachEvent) {
                e.attachEvent('onload', iframeOnload);
            }
            else {
                e.addEventListener('load', iframeOnload, false);
            }

            sliderHolder.insertBefore(e, sliderHolder.firstChild);
        }
    }(document.isTrellix));

}



</script>
<style>
	#body .adCenterClass{margin:0 auto}
</style>

<div id="tb_container" style="background:#DFDCCF; border-bottom:1px solid #393939; position:relative; z-index:999999999!important">
    <div id="tb_ad" class="adCenterClass" style="display:block!important; overflow:hidden; width:916px;">
    <a href="http://adtrack.ministerial5.com/clicknew/?a=637394" title="build your own website at Tripod.com" style="float:left; width:186px; border:0">
    	<img src="http://ly.lygo.com/ly/tpSite/images/freeAd2.jpg" alt="Make your own free website on Tripod.com" style="border:0; display:block" />
    </a> 
        <div id="ad_container" style="display:block!important; float:left; width:728px ">
        <script type="text/javascript">document.write(lycos_ad['leaderboard']);</script>
        </div>
    </div>
</div>

<!-- ///////////////////////////////////// -->
<div id="lyslider-adblock-wrapper" style="display:none; height:300px; overflow:hidden; position:absolute; right:0; top:150px; width:320px; z-index:99999999; ">
<div id="lyslider-adblock-holder" style="background-color:#888; height:250px; margin-bottom:25px; padding:4px; position:absolute; right:-320px; top:10px; width:300px; ">
<a id="lyslider-adblock-close" href="#" style="background-color:#222; bottom:-19px; color:#fff; display:block; font:10px Arial, Helvetica, Sans-serif; padding:4px; position:absolute; right:0; text-decoration:none; z-index:9999999999">Close Ad</a>
</div>
</div>


<div id="FooterAd" style="background:#DFDCCF; border-top:1px solid #393939; clear:both; display:none; width:100%!important; position:relative; z-index:999999!important; height:90px!important"> 
	<div class="adCenterClass" style="display:block!important; overflow:hidden; width:916px;">
	<a href="http://adtrack.ministerial5.com/clicknew/?a=637394" title="build your own website at Tripod.com" style="float:left; display:block; width:186px; border:0">
    	<img src="http://ly.lygo.com/ly/tpSite/images/freeAd2.jpg" alt="Make your own free website on Tripod.com" style="border:0; display:block; " />
    </a> 
        <div id="footerAd_container" style="display:block!important; float:left; width:728px">
        <iframe id="lycosFooterAdiFrame" style="border:0; display:block; float:left; height:96px; overflow:hidden; padding:0; width:750px"></iframe>
        <!-- <script type="text/javascript">document.write(lycos_ad['leaderboard2']);</script> -->
        </div>
	</div>
</div>
<noscript>
 <img src="http://members.tripod.com/adm/img/common/ot_noscript.gif?rand=865401" alt="" width="1" height="1" />
 <!-- BEGIN STANDARD TAG - 728 x 90 - Lycos - Tripod Fallthrough - DO NOT MODIFY -->
 <iframe frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="728" height="90" src="http://ad.yieldmanager.com/st?ad_type=iframe&amp;ad_size=728x90&amp;section=209094"></iframe>
 <!-- END TAG -->
</noscript>

<!-- Start Ybrant -->
<img src="http://ad.yieldmanager.com/pixel?id=1901600&t=2" width="1" height="1" />
<!--   End Ybrant -->

<!-- Start Datonics -->
<script type="text/javascript" src="http://ads.pro-market.net/ads/scripts/site-132783.js"></script>
<!--   End Datonics -->

<!-- Start Chango -->
<script type="text/javascript">
    var __cho__ = {"pid":1694};
    (function() {
        var c = document.createElement('script');
        c.type = 'text/javascript';
        c.async = true;
        c.src = document.location.protocol + '//cc.chango.com/static/o.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(c, s);
    })();
</script>
<!--   End Chango -->


<center>
<table border="3" cellpadding="10" cellspacing="5">
<tr>
<td><!--webbot bot="Navigation" S-Type="global"
S-Orientation="horizontal" S-Rendering="graphics" B-Include-Home="FALSE"
B-Include-Up="TRUE" U-Page="/W:/doc/structures/16/1690.htm" S-Target startspan --><nobr>[&nbsp;<a href="../../rfc/index.htm" target="">Up</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="http://www.fay.naverex.kiev.ua/docs/index.htm" target="">Docs&nbsp;Home</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="32769" -->
</td>
<td>
<h1 align="center"><font color="#FF00FF"><!--webbot bot="Navigation" S-Type="banner"
S-Rendering S-Orientation B-Include-Home B-Include-Up U-Page="/W:/doc/structures/16/1690.htm" S-Target startspan -->Format of DOS 4.0-6.0 swappable data area<!--webbot bot="Navigation" endspan i-checksum="37948" --></font></h1>
</td>
<td><!--webbot bot="Navigation" S-Type="arrows"
S-Orientation="horizontal" S-Rendering="graphics" B-Include-Home="FALSE"
B-Include-Up="FALSE" U-Page="/W:/doc/structures/16/1690.htm" S-Target startspan --><nobr>[&nbsp;<a href="1689.htm" target="">Back</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="1691.htm" target="">Next</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="41522" -->
</td>
</tr>
</table>
</center>
<hr>
<table border="3" cellpadding="3" cellspacing="3">
<tr>
<th valign="top" align="center" nowrap><b>Offset</b></th>
<th valign="top" align="center" nowrap><b>Size</b></th>
<th valign="top" align="center" nowrap><b>Description</b></th>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-34</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> printer echo flag
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>off</td>
    </tr>
    <tr>
      <td>FFh</td>
      <td>=</td>
      <td>active</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-31</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> current switch character (ignored by DOS 5+) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-30</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> current memory allocation strategy (see AH=58h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-28</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> incremented on each INT 21/AX=5E01h call </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-27</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 16 BYTEs </p>
</td>
<td valign="top"> machine name set by INT 21/AX=5E01h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-11</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 5 WORDs </p>
</td>
<td valign="top"> zero-terminated list of offsets which need to be patched to
  enable critical-section calls (see INT 2A/AH=80h) (all offsets are 0D0Ch, but
  this list is still present for DOS 3.x compatibility) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>-1</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> unused padding </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>Note:</b> </p>
</td>
<td valign="top" colspan="2">
<p align="left"> The above data is not actually part of the SDA, and is much
more likely to change between DOS versions/OEMs than data in the SDA itself. </p>
</td>
</tr>
<tr>
<td valign="top" nowrap colspan="3">
<p align="center"> <b>---start of actual SDA---</b> </p>
</td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> critical error flag (&quot;ErrorMode&quot;) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>01h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> InDOS flag (count of active INT 21 calls) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>02h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> drive on which current critical error occurred or FFh (DR DOS
  3.41/5.0 set this to 00h when no critical error) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>03h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> locus of last error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>04h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> extended error code of last error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>06h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> suggested action for last error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>07h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> class of last error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>08h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> ES:DI pointer for last error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> current DTA (Disk Transfer Address)
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td valign="top">Note:</td>
      <td>May point into SDA during the DOS EXEC function (see AH=4Bh), so
        programs which swap the SDA must be prepared to move the DTA to a
        private buffer if they might be invoked during an EXEC.</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>10h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> current PSP </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>12h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> stores SP across an INT 23 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>14h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> return code from last process termination (zerod after reading
  with AH=4Dh) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>16h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> current drive </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>17h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> extended break flag </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>18h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: code page switching </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>19h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: copy of previous byte in case of INT 24 Abort </td>
</tr>
<tr>
<td valign="top" nowrap colspan="3">
<p align="center"> <b>---remainder need only be swapped if in DOS---</b> </p>
</td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>1Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> value of AX on call to INT 21
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td valign="top">Note:</td>
      <td>does not contain correct value on functions 00h-0Ch, 50h, 51h, 59h, or
        62h</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>1Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> PSP segment for sharing/network (0000h = local) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>1Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> network machine number for sharing/network (0000h = local) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>20h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> first usable memory block found when allocating memory </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>22h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> best usable memory block found when allocating memory </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> last usable memory block found when allocating memory </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>26h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> memory size in paragraphs (used only during initialization) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>28h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> last entry checked during directory search </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: nonzero if INT 24 Fail </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Bh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flags: allowable INT 24 responses (passed to INT 24 in AH) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: do not set directory if nonzero </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Dh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: program aborted by ^C </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: allow embedded blanks in FCB<br>
  may also allow use of &quot;*&quot; wildcard in FCBs </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2Fh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> padding (unused) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>30h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> day of month </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>31h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> month </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>32h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> year - 1980 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>34h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> number of days since 01jan1980 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>36h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> day of week
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>0</td>
      <td>-</td>
      <td>Sunday</td>
    </tr>
    <tr>
      <td>1</td>
      <td>-</td>
      <td>Monday</td>
    </tr>
    <tr>
      <td>2</td>
      <td>-</td>
      <td>Tuesday</td>
    </tr>
    <tr>
      <td>3</td>
      <td>-</td>
      <td>Wednesday</td>
    </tr>
    <tr>
      <td>4</td>
      <td>-</td>
      <td>Thursday</td>
    </tr>
    <tr>
      <td>5</td>
      <td>-</td>
      <td>Friday</td>
    </tr>
    <tr>
      <td>6</td>
      <td>-</td>
      <td>Saturday</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>37h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: console swapped during read from device </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>38h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: safe to call INT 28 if nonzero </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>39h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: abort currently in progress, turn INT 24 Abort into Fail </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>3Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 30 BYTEs </p>
</td>
<td valign="top"> device driver request header (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/97/25.html">#02597</a>
  at INT 2F/AX=0802h) for device calls </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>58h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to device driver entry point (used in calling driver) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>5Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 22 BYTEs </p>
</td>
<td valign="top"> device driver request header for I/O calls </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>72h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 14 BYTEs </p>
</td>
<td valign="top"> device driver request header for disk status check (also
  includes following eight bytes for some calls) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>80h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to device I/O buffer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>84h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> part of request header at 72h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>86h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> part of request header at 72h (0) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>88h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> type of PSP copy
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>simple for INT 21/AH=26h</td>
    </tr>
    <tr>
      <td>FFh</td>
      <td>=</td>
      <td>make child</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>89h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> start offset of file region to lock/unlock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>8Dh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right">DWORD
</td>
<td valign="top"> length of file region to lock/unlock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>91h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> padding (unused) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>92h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 3 BYTEs </p>
</td>
<td valign="top"> 24-bit user number (see AH=30h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>95h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> OEM number (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/94/13.html">#01394</a>
  at AH=30h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>96h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 6 BYTEs </p>
</td>
<td valign="top"> CLOCK$ transfer record (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/88/16.html">#01688</a>
  at AX=5D06h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>9Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> device I/O buffer for single-byte I/O functions </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>9Dh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> padding </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>9Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 128 BYTEs </p>
</td>
<td valign="top"> buffer for filename </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>11Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 128 BYTEs </p>
</td>
<td valign="top"> buffer for filename (rename destination name) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>19Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 21 BYTEs </p>
</td>
<td valign="top"> findfirst/findnext search data block (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/26/16.html">#01626</a>
  at AH=4Eh) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>1B3h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 32 BYTEs </p>
</td>
<td valign="top"> directory entry for found file (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/94/13.html">#01394</a>
  at AH=11h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>1D3h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 88 BYTEs </p>
</td>
<td valign="top"> copy of current directory structure for drive being accessed </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>22Bh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 11 BYTEs </p>
</td>
<td valign="top"> FCB-format filename for device name comparison </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>236h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> terminating NUL for above filename </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>237h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 11 BYTEs </p>
</td>
<td valign="top"> wildcard destination specification for rename (FCB format) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>242h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> terminating NUL for above filespec </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>243h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> padding??? </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>244h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> destination starting sector (cluster???) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>246h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 5 BYTEs </p>
</td>
<td valign="top"> extra space to allow a directory entry to be stored starting
  at offset 22Bh </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24Bh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right">BYTE </p>
</td>
<td valign="top"> extended FCB file attributes </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24Ch</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> type of FCB
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>regular</td>
    </tr>
    <tr>
      <td>FFh</td>
      <td>=</td>
      <td>extended</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24Dh</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> directory search attributes </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24Eh</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> file open/access mode </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>24Fh</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag: nonzero if file was deleted </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>250h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag: device name found on rename, or file not found </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>251h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag: splice file name and directory name together </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>252h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag indicating how DOS function was invoked
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>direct INT 20/INT 21</td>
    </tr>
    <tr>
      <td>FFh</td>
      <td>=</td>
      <td>server call AX=5D00h</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>253h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> sector position within cluster </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>254h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag: translating sector/cluster </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>255h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> flag:
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>read</td>
    </tr>
    <tr>
      <td>01h</td>
      <td>=</td>
      <td>write</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>256h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> current working drive number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>257h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> cluster factor </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>258h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> &quot;sda_CLUSSPLIT&quot; flag: cluster split between two FAT
  sectors </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>259h</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> line edit (AH=0Ah) insert mode flag (nonzero = on) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Ah</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> canonicalized filename referred to existing file/dir if FFh </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Bh</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> volume ID flag </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Ch</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> type of process termination (00h-03h) (see AH=4Dh) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Dh</b> </p>
</td>
<td valign="top" nowrap align="right">
BYTE
</td>
<td valign="top"> unused (padding for alignment) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Eh</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> BYTE </p>
</td>
<td valign="top"> file create flag (00h = no, search only) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>25Fh</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> BYTE </p>
</td>
<td valign="top"> value for deleted file's first byte:
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>delete all</td>
    </tr>
    <tr>
      <td>E5h</td>
      <td>=</td>
      <td>else</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>260h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to Drive Parameter Block for critical error invocation </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>264h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to stack frame containing user registers on INT 21 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>268h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> WORD </p>
</td>
<td valign="top"> stores SP across INT 24 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>26Ah</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to DOS Drive Parameter Block for ??? </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>26Eh</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> WORD </p>
</td>
<td valign="top"> segment of disk buffer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>270h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> saving partial cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>274h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> WORD </p>
</td>
<td valign="top"> &quot;sda_PREREAD&quot;
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>preread</td>
    </tr>
    <tr>
      <td>01h</td>
      <td>=</td>
      <td>optional</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>276h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> WORD </p>
</td>
<td valign="top"> temporary used in allocating disk space </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>278h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> BYTE </p>
</td>
<td valign="top"> Media ID byte returned by AH=1Bh,1Ch </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>279h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> BYTE </p>
</td>
<td valign="top"> unused </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>27Ah</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to device header if filename is character device </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>27Eh</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to current SFT </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>282h</b> </p>
</td>
<td valign="top" nowrap align="right">
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to current directory structure for drive being
  accessed </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>286h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to caller's FCB </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>28Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> SFT index to which file being opened will refer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>28Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> temporary storage for file handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>28Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to JFT entry (for file being opened) in process handle
  table (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/78/13.html">#01378</a>
  at AH=26h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>292h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> &quot;sda_WFP_START&quot; offset in DOS DS of first filename
  argument </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>294h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> &quot;sda_REN_WFP&quot; offset in DOS DS of second filename
  argument </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>296h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> offset of last component in pathname or FFFFh </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>298h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> offset of transfer address to add </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>29Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> last relative cluster within file being accessed </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>29Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> temp: absolute cluster number being accessed </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>29Eh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> directory sector number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2A2h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> directory cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2A4h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> current relative sector number within file </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2A8h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> current sector number (number of previously written sectors) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2ACh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> current byte offset within sector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2AEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> current offset in file </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2B2h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> number of bytes in first sector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2B4h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> bytes in partial last sector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2B6h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> number of whole sectors </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2B8h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> free file cluster entry </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2BAh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> last file cluster entry </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2BCh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> next file cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2BEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> number of bytes appended to file </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2C2h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to current work disk buffer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2C6h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to working SFT </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2CAh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> used by INT 21 dispatcher to store caller's BX </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2CCh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> used by INT 21 dispatcher to store caller's DS </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2CEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> temporary storage while saving/restoring caller's registers </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2D0h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to prev call frame (offset 264h) if INT 21 reentered<br>
  also switched to for duration of INT 24 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2D4h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> open mode/action for INT 21/AX=6C00h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2D6h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> extended open conditional flag<br>
  set to 00h by INT 21h dispatcher, 02h when a read is performed, and 01h or 03h
  by INT 21/AX=6C00h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2D7h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> extended open I/O mode </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2D9h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> stored ES:DI for AX=6C00h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2DDh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> extended file open action code (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/70/17.html">#01770</a>
  at AX=6C00h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2DFh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> extended file open attributes (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/69/17.html">#01769</a>
  at AX=6C00h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2E1h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> extended file open file mode (see AX=6C00h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2E3h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to filename to open (see AX=6C00h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2E7h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of 32-bit sector number, or temp data buffer size
  from disk buffer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2E9h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> &quot;sda_OffsetMagicPatch&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2EBh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> disk full on &gt;32M partition when set to 01h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2ECh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> stores DS during call to [List-of-Lists + 37h] </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2EEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> temporary storage (various uses) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2F0h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> storage for drive error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2F1h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> DOS 3.4 (European MS-DOS 4.00) bit flags </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2F3h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to user-supplied filename </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2F7h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> DWORD </p>
</td>
<td valign="top"> pointer to user-supplied rename destination filename </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2FBh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> stores SS during call to [List-of-Lists + 37h] and INT 25,26 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2FDh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> stores SP during call to [List-of-Lists + 37h] and INT 25,26 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>2FFh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag, nonzero if stack switched in calling [List-of-Lists+37h] </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>300h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 21 BYTEs </p>
</td>
<td valign="top"> FindFirst search data for source file(s) of a rename operation
  (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/26/16.html">#01626</a>
  at AH=4Eh) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>315h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 32 BYTEs </p>
</td>
<td valign="top"> directory entry for file being renamed (see <a href="file://D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/52/13.html">#01352</a>
  at AH=11h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>335h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 331 BYTEs </p>
</td>
<td valign="top"> critical error stack </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>480h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 384 BYTEs </p>
</td>
<td valign="top"> disk stack (functions greater than 0Ch, INT 25,INT 26) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>600h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 384 BYTEs </p>
</td>
<td valign="top"> character I/O stack (functions 01h through 0Ch) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>780h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> device driver lookahead flag (usually printer) (see
  AH=64h&quot;DOS 3.2+&quot;) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>781h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> volume change flag </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>782h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: virtual file open </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>783h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> fastseek drive </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>784h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> fastseek first cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>786h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> fastseek logical cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>788h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> fastseek returned logical cluster number </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>78Ah</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> temporary location of DOS@SYSINIT </td>
</tr>
<tr>
<td valign="top" nowrap colspan="3">
<p align="center"> <b>---MSDOS 7.1+ (FAT32)---</b> </p>
</td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>78Ch</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 47 BYTEs </p>
</td>
<td valign="top"> ??? </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7BBh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> BYTE </p>
</td>
<td valign="top"> flag: absolute disk read/write type
  <table border="0" cellspacing="0" cellpadding="3">
    <tr>
      <td>00h</td>
      <td>=</td>
      <td>INT 25/INT 26</td>
    </tr>
    <tr>
      <td>01h</td>
      <td>=</td>
      <td>INT 21/AX=7305h</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7BCh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of directory cluster number at offset 2A2h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7BEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of cluster number at offset 29Ch </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7C0h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of next file cluster number at offset 2BCh </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7C2h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of last relative cluster number at offset 29Ah </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7C4h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of temp at offset 276h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7C6h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of offset 244h </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7C8h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of EBX </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7CAh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of EDX used by &quot;PACK&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7CCh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of EDI used by &quot;UNPACK&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7CEh</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of EBX used by &quot;SETDIRSRCH&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7D0h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of ECX used by &quot;FREECLUSTER&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7D2h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> WORD </p>
</td>
<td valign="top"> high word of EDI used by &quot;GETEOF&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>7D4h</b> </p>
</td>
<td valign="top" nowrap>
<p align="right"> 3 WORDs </p>
</td>
<td valign="top"> ??? </td>
</tr>
</table>
<hr>
<table border="3" cellpadding="3" cellspacing="3">
<tr>
<td valign="top" align="center" nowrap>
<p align="left"><b>Note:</b></td>
<td valign="top" align="center">
<p align="left"> The only fields which remain valid BETWEEN calls to INT 21h are
those in the initial &quot;swap-always&quot; portion of the SDA. </p>
</td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="left"><b>See Also:</b></p>
</td>
<td valign="top">
<p align="left"> <a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/87/16.html">#01687</a>,<a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/89/16.html">#01689</a> </p>
</td>
</tr>
</table>
<p> </p>
</body>
</html>
