<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Values for VMM (VxD ID 0001h) service number</title>
</head>
<body background="../images/background_item.gif"><!--'"</title></head>-->
<script type="text/javascript">
////// Compete /////////////////////
__compete_code = '667f89f26d96c30e99728fe6a608804d';
(function () {
    var s = document.createElement('script'),
        d = document.getElementsByTagName('head')[0] ||
            document.getElementsByTagName('body')[0],
        t = 'https:' == document.location.protocol ? 
            'https://c.compete.com/bootstrap/' : 
            'http://c.compete.com/bootstrap/';
    s.src = t + __compete_code + '/bootstrap.js';
    s.type = 'text/javascript';
    s.async = 'async'; 
    if (d) { d.appendChild(s); }
})();


////// Quantcast  /////////////////////
function channValidator(chann) {
    return (typeof(chann) == 'string' && chann != '');
}

function lycosQuantcast(){
    var lb = "";
    if(typeof(cm_host) !== 'undefined' && channValidator(cm_host)){
        lb += cm_host.split('.')[0] + '.';
    }

    if(typeof(cm_taxid) !== 'undefined' && channValidator(cm_taxid)){
        lb += cm_taxid;
        lb = lb.replace('/','');
    } else {
        lb = lb.replace('.','');
    }
    return lb;
}

var _qevents = _qevents || [];

(function() {
    var elem = document.createElement('script');
    elem.src = (document.location.protocol == "https:" ? "https://secure" :"http://edge") + ".quantserve.com/quant.js";
    elem.async = true;
    elem.type = "text/javascript";
    var scpt = document.getElementsByTagName('script')[0];
    scpt.parentNode.insertBefore(elem, scpt);
})();

_qevents.push({
    qacct:"p-6eQegedn62bSo",
    labels:lycosQuantcast()
});

////// OwnerIQ  /////////////////////
var __oiq_pct = 50;
if( __oiq_pct>=100 || Math.floor(Math.random()*100/(100-__oiq_pct)) > 0 ) {
    var _oiqq = _oiqq || [];
    _oiqq.push(['oiq_addPageBrand', 'Lycos']);
    _oiqq.push(['oiq_addPageCat', 'Internet > Websites']);
    _oiqq.push(['oiq_addPageLifecycle', 'Intend']);
    _oiqq.push(['oiq_doTag']);

    (function() {
        var oiq = document.createElement('script'); oiq.type = 'text/javascript'; oiq.async = true;
        oiq.src = document.location.protocol + '//px.owneriq.net/stas/s/lycosn.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(oiq, s);
    })();
}



/////// Google Analytics ////////////
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-21402695-19']);
_gaq.push(['_setDomainName', 'tripod.com']);
_gaq.push(['_setCustomVar', 1, 'member_name', 'faydoc', 3]);
_gaq.push(['_trackPageview']);
(function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();


/////// Lycos Initialization ////////////
function getReferrer() {
    // Reads the referrer out of the cookie, if available.
    var all= this.document.cookie;
    if (all== '') return false;
    var cookie_name = 'REFERRER=';
    var start = all.lastIndexOf(cookie_name);
    if (start == -1) return false;  // referrer URL not found.
    start += cookie_name.length;
    var end = all.indexOf(';', start);
    if (end == -1) end = all.length;
    return all.substring(start, end);
}
function getQuery() {
    // Get the referrer search query from cookie, if available.
    var rfr = getReferrer();
    if (rfr == '') return false;
    var q = extractQuery(rfr, 'yahoo.com', 'p=');
    if (q) return q;
    q = extractQuery(rfr, '', 'q=');
    return q ? q : "";
}
function extractQuery(full, site, q_param) {
    var start = full.lastIndexOf(site);
    if (start == -1) return false;
    start = full.lastIndexOf(q_param);
    if (start == -1) return false;
    start += q_param.length;
    var end = full.indexOf('&', start);
    if (end == -1) end = full.length;
    return unescape(full.substring(start, end)).split(" ").join("+");
}

function generateHref(atag, template){
    atag.href=template.replace('_MYURL_', window.location.href.replace('http://', '')).replace('_MYTITLE_', 'Check%20out%20this%20Tripod%20Member%20site!'); 
}


var lycos_ad = Array();
var lycos_onload_timer;

var cm_role = "live";
var cm_host = "tripod.lycos.com";
var cm_taxid = "/memberembedded";
var tripod_member_name = "faydoc";
var tripod_member_page = "faydoc/structures/12/1265.htm";
var tripod_ratings_hash = "1372261700:9d9790a93677807724acef21e3759e9d";

var lycos_ad_category = {"find_what":"reliv.com"};

var lycos_ad_remote_addr = "99.159.74.223";
var lycos_ad_www_server = "www.tripod.lycos.com";
var lycos_ad_track_small = "http://members.tripod.com/adm/img/common/ot_smallframe.gif?rand=928563";
var lycos_ad_track_served = "http://members.tripod.com/adm/img/common/ot_adserved.gif?rand=928563";
var lycos_search_query = getQuery();


////// Criteo /////////////////////
var cto_conf = { a:true, i: "294", c:"img", kw: "" } ;
(function (){
    var c = document.createElement("script"); c.type = "text/javascript"; c.async = true;
    c.src = "http://members.tripod.com/adm/partner/criteo_ld_kw.js";
    var s = document.getElementsByTagName("body")[0]; s.appendChild(c);
})(); 

</script>

<script type="text/javascript" src="http://scripts.lycos.com/catman/init.js"></script>
<script type="text/javascript"> 

(function(isV) {
    if (!isV) {
        return;
    }

    //this.lycos_search_query = lycos_get_search_referrer();
    var adMgr = new AdManager();
    var lycos_prod_set = adMgr.chooseProductSet();
    var slots = ["leaderboard", "leaderboard2", "toolbar_image", "toolbar_text", "smallbox", "top_promo", "footer2"];
    var adCat = this.lycos_ad_category;
    adMgr.setForcedParam('page', (adCat && adCat.dmoz) ? adCat.dmoz : 'member');

    if (this.lycos_search_query) {
        adMgr.setForcedParam("keyword", this.lycos_search_query);
    } 
    else if (adCat && adCat.find_what) {
        adMgr.setForcedParam('keyword', adCat.find_what);
    }

    for (var s in slots) {
        var slot = slots[s];
        if (adMgr.isSlotAvailable(slot)) {
            this.lycos_ad[slot] = adMgr.getSlot(slot);
        }
    }

    adMgr.renderHeader();
    adMgr.renderFooter();
}((function() {
    var w = 0, h = 0, minimumThreshold = 300;
    if (top == self) {
        return true;
    }

    if (typeof(window.innerWidth) == 'number' ) {
        w = window.innerWidth;
        h = window.innerHeight;
    }
    else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
        w = document.documentElement.clientWidth;
        h = document.documentElement.clientHeight;
    }
    else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
        w = document.body.clientWidth;
        h = document.body.clientHeight;
    }

    return ((w > minimumThreshold) && (h > minimumThreshold));
}())));
    
window.onload = function() {
    var f = document.getElementById("FooterAd");
    var b = document.getElementsByTagName("body")[0];
    b.appendChild(f);
    f.style.display = "block";
    document.getElementById('lycosFooterAdiFrame').src = '/adm/ad/footerAd.iframe.html';


    // DOM Injection Ad
    (function(isTrellix) {
        var e = document.createElement('iframe');
        e.style.border = '0';
        e.style.margin = 0;
        e.style.display = 'block';
        e.style.cssFloat = 'right';
        e.style.height = '254px';
        e.style.overflow = 'hidden';
        e.style.padding = 0;
        e.style.width = '300px';

        var getCommentNodes = function(regexPattern) {
            var nodes = {};
            var nodesA = [];
            var preferredNodesList = ['a', 'c', 'b'];

            (function getNodesThatHaveComments(n, pattern) {
                if (n.hasChildNodes()) {
                    if (n.tagName === 'IFRAME') {
                        return false;
                    }
                    for (var i = 0; i < n.childNodes.length; i++) {
                        if ((n.childNodes[i].nodeType === 8) && (pattern.test(n.childNodes[i].nodeValue))) {
                            var areaName = pattern.exec(n.childNodes[i].nodeValue)[1];
                            nodes[areaName] = n;
                        }
                        else if (n.childNodes[i].nodeType === 1) {
                            getNodesThatHaveComments(n.childNodes[i], pattern);
                        }
                    }
                }
            }(document.body, regexPattern));

            for (var i in preferredNodesList) {
                if (nodes[preferredNodesList[i]]) {
                    if (nodes[preferredNodesList[i]].parentNode.parentNode.parentNode.parentNode) {
                        nodesA.push(nodes[preferredNodesList[i]].parentNode.parentNode.parentNode.parentNode);
                    }
                }
            }

            return nodesA;
        }

        var properNode = null;
        var areaNodes = getCommentNodes(new RegExp('^area Type="area_(\\w+)"'));
        for (var i = 0; i < areaNodes.length; i++) {
            var a = parseInt(getComputedStyle(areaNodes[i]).width);
            if ((a >= 300) && (a <= 400)) {
                properNode = areaNodes[i];
                break;
            }
        }

        if ((isTrellix) && (properNode)) {
            e.src = '/adm/ad/injectAd.iframe.html';
            properNode.insertBefore(e, properNode.firstChild);
        }
        else {
            e.src = '/adm/ad/sliderAd.iframe.html';
            var sliderBlock = document.getElementById('lyslider-adblock-wrapper');
            var sliderHolder = document.getElementById('lyslider-adblock-holder');
            var sliderClose = document.getElementById('lyslider-adblock-close');
            sliderBlock.style.display = 'block';

            sliderClose.onclick = function() {
                sliderBlock.parentNode.removeChild(sliderBlock);
                return false;
            }

            var iframeOnload = function() {
                setTimeout((function sliiide() {
                    var s = (window.getComputedStyle) ? parseInt(getComputedStyle(sliderHolder).right) : parseInt(sliderHolder.currentStyle.right);
                    if (s <= 0) {
                        sliderHolder.style.right = (s + 6) + 'px';
                        setTimeout(sliiide, 10);
                    }
                    else {
                        sliderHolder.style.right = '0px';
                        sliderClose.style.display = 'block';
                    }
                }), 1000);
            }

            if (e.attachEvent) {
                e.attachEvent('onload', iframeOnload);
            }
            else {
                e.addEventListener('load', iframeOnload, false);
            }

            sliderHolder.insertBefore(e, sliderHolder.firstChild);
        }
    }(document.isTrellix));

}



</script>
<style>
	#body .adCenterClass{margin:0 auto}
</style>

<div id="tb_container" style="background:#DFDCCF; border-bottom:1px solid #393939; position:relative; z-index:999999999!important">
    <div id="tb_ad" class="adCenterClass" style="display:block!important; overflow:hidden; width:916px;">
    <a href="http://adtrack.ministerial5.com/clicknew/?a=637394" title="build your own website at Tripod.com" style="float:left; width:186px; border:0">
    	<img src="http://ly.lygo.com/ly/tpSite/images/freeAd2.jpg" alt="Make your own free website on Tripod.com" style="border:0; display:block" />
    </a> 
        <div id="ad_container" style="display:block!important; float:left; width:728px ">
        <script type="text/javascript">document.write(lycos_ad['leaderboard']);</script>
        </div>
    </div>
</div>

<!-- ///////////////////////////////////// -->
<div id="lyslider-adblock-wrapper" style="display:none; height:300px; overflow:hidden; position:absolute; right:0; top:150px; width:320px; z-index:99999999; ">
<div id="lyslider-adblock-holder" style="background-color:#888; height:250px; margin-bottom:25px; padding:4px; position:absolute; right:-320px; top:10px; width:300px; ">
<a id="lyslider-adblock-close" href="#" style="background-color:#222; bottom:-19px; color:#fff; display:block; font:10px Arial, Helvetica, Sans-serif; padding:4px; position:absolute; right:0; text-decoration:none; z-index:9999999999">Close Ad</a>
</div>
</div>


<div id="FooterAd" style="background:#DFDCCF; border-top:1px solid #393939; clear:both; display:none; width:100%!important; position:relative; z-index:999999!important; height:90px!important"> 
	<div class="adCenterClass" style="display:block!important; overflow:hidden; width:916px;">
	<a href="http://adtrack.ministerial5.com/clicknew/?a=637394" title="build your own website at Tripod.com" style="float:left; display:block; width:186px; border:0">
    	<img src="http://ly.lygo.com/ly/tpSite/images/freeAd2.jpg" alt="Make your own free website on Tripod.com" style="border:0; display:block; " />
    </a> 
        <div id="footerAd_container" style="display:block!important; float:left; width:728px">
        <iframe id="lycosFooterAdiFrame" style="border:0; display:block; float:left; height:96px; overflow:hidden; padding:0; width:750px"></iframe>
        <!-- <script type="text/javascript">document.write(lycos_ad['leaderboard2']);</script> -->
        </div>
	</div>
</div>
<noscript>
 <img src="http://members.tripod.com/adm/img/common/ot_noscript.gif?rand=928563" alt="" width="1" height="1" />
 <!-- BEGIN STANDARD TAG - 728 x 90 - Lycos - Tripod Fallthrough - DO NOT MODIFY -->
 <iframe frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="728" height="90" src="http://ad.yieldmanager.com/st?ad_type=iframe&amp;ad_size=728x90&amp;section=209094"></iframe>
 <!-- END TAG -->
</noscript>

<!-- Start Ybrant -->
<img src="http://ad.yieldmanager.com/pixel?id=1901600&t=2" width="1" height="1" />
<!--   End Ybrant -->

<!-- Start Datonics -->
<script type="text/javascript" src="http://ads.pro-market.net/ads/scripts/site-132783.js"></script>
<!--   End Datonics -->

<!-- Start Chango -->
<script type="text/javascript">
    var __cho__ = {"pid":1694};
    (function() {
        var c = document.createElement('script');
        c.type = 'text/javascript';
        c.async = true;
        c.src = document.location.protocol + '//cc.chango.com/static/o.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(c, s);
    })();
</script>
<!--   End Chango -->


<center>
<table border="3" cellpadding="10" cellspacing="5">
<tr>
<td><!--webbot bot="Navigation" S-Type="global"
S-Orientation="horizontal" S-Rendering="graphics" B-Include-Home="FALSE"
B-Include-Up="TRUE" U-Page="/W:/doc/structures/12/1265.htm" S-Target startspan --><nobr>[&nbsp;<a href="../../rfc/index.htm" target="">Up</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="http://www.fay.naverex.kiev.ua/docs/index.htm" target="">Docs&nbsp;Home</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="32769" -->
</td>
<td>
<h1 align="center"><font color="#FF00FF"><!--webbot bot="Navigation" S-Type="banner"
S-Rendering S-Orientation B-Include-Home B-Include-Up U-Page="/W:/doc/structures/12/1265.htm" S-Target startspan -->Values for VMM (VxD ID 0001h) service number<!--webbot bot="Navigation" endspan i-checksum="31900" --></font></h1>
</td>
<td><!--webbot bot="Navigation" S-Type="arrows"
S-Orientation="horizontal" S-Rendering="graphics" B-Include-Home="FALSE"
B-Include-Up="FALSE" U-Page="/W:/doc/structures/12/1265.htm" S-Target startspan --><nobr>[&nbsp;<a href="1264.htm" target="">Back</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="1266.htm" target="">Next</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="41008" -->
</td>
</tr>
</table>
</center>
<hr>
<table border="3" cellpadding="3" cellspacing="3">
<tr>
<th valign="top" align="center" nowrap><b>Value</b></th>
<th valign="top" align="center" nowrap><b>Description</b></th>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0000h</b> </p>
</td>
<td valign="top"> get version </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0001h</b> </p>
</td>
<td valign="top"> get current VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0002h</b> </p>
</td>
<td valign="top"> test current VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0003h</b> </p>
</td>
<td valign="top"> get system VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0004h</b> </p>
</td>
<td valign="top"> test system VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0005h</b> </p>
</td>
<td valign="top"> validate VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0006h</b> </p>
</td>
<td valign="top"> get VMM reenter count </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0007h</b> </p>
</td>
<td valign="top"> begin reentrant execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0008h</b> </p>
</td>
<td valign="top"> end reentrant execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0009h</b> </p>
</td>
<td valign="top"> install V86 breakpoint </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Ah</b> </p>
</td>
<td valign="top"> remove V86 breakpoint </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Bh</b> </p>
</td>
<td valign="top"> allocate V86 callback </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Ch</b> </p>
</td>
<td valign="top"> allocation PM callback </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Dh</b> </p>
</td>
<td valign="top"> call when VM returns </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Eh</b> </p>
</td>
<td valign="top"> schedule global event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>000Fh</b> </p>
</td>
<td valign="top"> schedule VM event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0010h</b> </p>
</td>
<td valign="top"> call global event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0011h</b> </p>
</td>
<td valign="top"> call VM event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0012h</b> </p>
</td>
<td valign="top"> cancel global event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0013h</b> </p>
</td>
<td valign="top"> cancel VM event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0014h</b> </p>
</td>
<td valign="top"> call priority VM event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0015h</b> </p>
</td>
<td valign="top"> cancel priority VM event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0016h</b> </p>
</td>
<td valign="top"> get NMI handler address </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0017h</b> </p>
</td>
<td valign="top"> set NMI handler address </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0018h</b> </p>
</td>
<td valign="top"> hook NMI event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0019h</b> </p>
</td>
<td valign="top"> call when VM interrupts enabled </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Ah</b> </p>
</td>
<td valign="top"> enable VM interrupts </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Bh</b> </p>
</td>
<td valign="top"> disable VM interrupts </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Ch</b> </p>
</td>
<td valign="top"> map flat </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Dh</b> </p>
</td>
<td valign="top"> map linear to VM address </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Eh</b> </p>
</td>
<td valign="top"> adjust execution priority </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>001Fh</b> </p>
</td>
<td valign="top"> begin critical section </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0020h</b> </p>
</td>
<td valign="top"> end critical section </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0021h</b> </p>
</td>
<td valign="top"> end critical section and suspend </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0022h</b> </p>
</td>
<td valign="top"> claim critical section </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0023h</b> </p>
</td>
<td valign="top"> release critical section </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0024h</b> </p>
</td>
<td valign="top"> call when not critical </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0025h</b> </p>
</td>
<td valign="top"> create semaphore </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0026h</b> </p>
</td>
<td valign="top"> destroy semaphore </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0027h</b> </p>
</td>
<td valign="top"> wait on semaphore </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0028h</b> </p>
</td>
<td valign="top"> signal semaphore </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0029h</b> </p>
</td>
<td valign="top"> get critical section status </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Ah</b> </p>
</td>
<td valign="top"> call when task switched </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Bh</b> </p>
</td>
<td valign="top"> suspend VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Ch</b> </p>
</td>
<td valign="top"> resume VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Dh</b> </p>
</td>
<td valign="top"> no-fail resume VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Eh</b> </p>
</td>
<td valign="top"> nuke VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>002Fh</b> </p>
</td>
<td valign="top"> crash current VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0030h</b> </p>
</td>
<td valign="top"> get execution focus </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0031h</b> </p>
</td>
<td valign="top"> set execution focus </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0032h</b> </p>
</td>
<td valign="top"> get time slice priority </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0033h</b> </p>
</td>
<td valign="top"> set time slice priority </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0034h</b> </p>
</td>
<td valign="top"> get time slice granularity </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0035h</b> </p>
</td>
<td valign="top"> set time slice granularity </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0036h</b> </p>
</td>
<td valign="top"> get time slice information </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0037h</b> </p>
</td>
<td valign="top"> adjust execution time </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0038h</b> </p>
</td>
<td valign="top"> release time slice </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0039h</b> </p>
</td>
<td valign="top"> wake up VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Ah</b> </p>
</td>
<td valign="top"> call when idle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Bh</b> </p>
</td>
<td valign="top"> get next VM handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Ch</b> </p>
</td>
<td valign="top"> set global timeout </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Dh</b> </p>
</td>
<td valign="top"> set VM timeout </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Eh</b> </p>
</td>
<td valign="top"> cancel timeout </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>003Fh</b> </p>
</td>
<td valign="top"> get system time
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>Return:</td>
      <td>EAX&nbsp;</td>
      <td>=</td>
      <td>time in milliseconds that Windows has been running</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0040h</b> </p>
</td>
<td valign="top"> get VM execution time </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0041h</b> </p>
</td>
<td valign="top"> hook V86 interrupt chain </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0042h</b> </p>
</td>
<td valign="top"> get V86 interrupt vector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0043h</b> </p>
</td>
<td valign="top"> set V86 interrupt vector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0044h</b> </p>
</td>
<td valign="top"> get PM interrupt vector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0045h</b> </p>
</td>
<td valign="top"> set PM interrupt vector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0046h</b> </p>
</td>
<td valign="top"> simulate interrupt </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0047h</b> </p>
</td>
<td valign="top"> simulate IRET </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0048h</b> </p>
</td>
<td valign="top"> simulate far call </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0049h</b> </p>
</td>
<td valign="top"> simulate far jump </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Ah</b> </p>
</td>
<td valign="top"> simulate far RET </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Bh</b> </p>
</td>
<td valign="top"> simulate far RET N </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Ch</b> </p>
</td>
<td valign="top"> build interrupt stack frame </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Dh</b> </p>
</td>
<td valign="top"> simulate push </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Eh</b> </p>
</td>
<td valign="top"> simulate pop </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>004Fh</b> </p>
</td>
<td valign="top"> _HeapAllocate </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0050h</b> </p>
</td>
<td valign="top"> _HeapReAllocate </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0051h</b> </p>
</td>
<td valign="top"> _HeapFree </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0052h</b> </p>
</td>
<td valign="top"> _HeapGetSize </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0053h</b> </p>
</td>
<td valign="top"> _PageAllocate </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0054h</b> </p>
</td>
<td valign="top"> _PageReAllocate </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0055h</b> </p>
</td>
<td valign="top"> _PageFree </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0056h</b> </p>
</td>
<td valign="top"> _PageLock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0057h</b> </p>
</td>
<td valign="top"> _PageUnLock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0058h</b> </p>
</td>
<td valign="top"> _PageGetSizeAddr </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0059h</b> </p>
</td>
<td valign="top"> _PageGetAllocInfo </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Ah</b> </p>
</td>
<td valign="top"> _GetFreePageCount </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Bh</b> </p>
</td>
<td valign="top"> _GetSysPageCount </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Ch</b> </p>
</td>
<td valign="top"> _GetVMPgCount </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Dh</b> </p>
</td>
<td valign="top"> _MapIntoV86 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Eh</b> </p>
</td>
<td valign="top"> _PhysIntoV86 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>005Fh</b> </p>
</td>
<td valign="top"> _TestGlobalV86Mem </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0060h</b> </p>
</td>
<td valign="top"> _ModifyPageBits </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0061h</b> </p>
</td>
<td valign="top"> copy page table </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0062h</b> </p>
</td>
<td valign="top"> map linear into V86 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0063h</b> </p>
</td>
<td valign="top"> linear page lock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0064h</b> </p>
</td>
<td valign="top"> linear page unlock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0065h</b> </p>
</td>
<td valign="top"> _SetResetV86Pageabl </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0066h</b> </p>
</td>
<td valign="top"> _GetV86PageableArray </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0067h</b> </p>
</td>
<td valign="top"> _PageCheckLinRange </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0068h</b> </p>
</td>
<td valign="top"> page out dirty pages </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0069h</b> </p>
</td>
<td valign="top"> discard pages </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Ah</b> </p>
</td>
<td valign="top"> _GetNulPageHandle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Bh</b> </p>
</td>
<td valign="top"> get first V86 page </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Ch</b> </p>
</td>
<td valign="top"> map physical address to linear address </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Dh</b> </p>
</td>
<td valign="top"> _GetAppFlatDSAlias </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Eh</b> </p>
</td>
<td valign="top"> _SelectorMapFlat </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>006Fh</b> </p>
</td>
<td valign="top"> _GetDemandPageInfo </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0070h</b> </p>
</td>
<td valign="top"> _GetSetPageOutCount </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0071h</b> </p>
</td>
<td valign="top"> hook V86 page </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0072h</b> </p>
</td>
<td valign="top"> assign device V86 pages </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0073h</b> </p>
</td>
<td valign="top"> deassign device V86 pages </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0074h</b> </p>
</td>
<td valign="top"> get array of V86 pages for device </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0075h</b> </p>
</td>
<td valign="top"> _SetNULPageAddr </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0076h</b> </p>
</td>
<td valign="top"> allocate GDT selector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0077h</b> </p>
</td>
<td valign="top"> free GDT selector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0078h</b> </p>
</td>
<td valign="top"> allocate LDT selector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0079h</b> </p>
</td>
<td valign="top"> free LDT selector </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Ah</b> </p>
</td>
<td valign="top"> _BuildDescriptorDWORDs </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Bh</b> </p>
</td>
<td valign="top"> get descriptor </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Ch</b> </p>
</td>
<td valign="top"> set descriptor </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Dh</b> </p>
</td>
<td valign="top"> toggle HMA </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Eh</b> </p>
</td>
<td valign="top"> get fault hook addresses </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>007Fh</b> </p>
</td>
<td valign="top"> hook V86 fault </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0080h</b> </p>
</td>
<td valign="top"> hook PM fault </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0081h</b> </p>
</td>
<td valign="top"> hook VMM fault </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0082h</b> </p>
</td>
<td valign="top"> begin nested V86 execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0083h</b> </p>
</td>
<td valign="top"> begin nested execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0084h</b> </p>
</td>
<td valign="top"> execute V86-mode interrupt </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0085h</b> </p>
</td>
<td valign="top"> resume execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0086h</b> </p>
</td>
<td valign="top"> end nested execution </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0087h</b> </p>
</td>
<td valign="top"> allocate PM application callback area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0088h</b> </p>
</td>
<td valign="top"> get current PM application callback area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0089h</b> </p>
</td>
<td valign="top"> set V86 execution mode </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Ah</b> </p>
</td>
<td valign="top"> set PM execution mode </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Bh</b> </p>
</td>
<td valign="top"> begin using locked PM stack </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Ch</b> </p>
</td>
<td valign="top"> end using locked PM stack </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Dh</b> </p>
</td>
<td valign="top"> save client state </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Eh</b> </p>
</td>
<td valign="top"> restore client state </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>008Fh</b> </p>
</td>
<td valign="top"> execute VxD interrupt
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td valign="top" rowspan="2" align="center">Stack:</td>
      <td>WORD</td>
      <td>interrupt number</td>
    </tr>
    <tr>
      <td colspan="2" align="center">
        <p align="left">other registers as required by interrupt call</td>
    </tr>
    <tr>
      <td valign="top">Return:</td>
      <td colspan="2" align="center">
        <p align="left">registers as returned by interrupt call</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0090h</b> </p>
</td>
<td valign="top"> hook device service
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td align="center">=</td>
      <td>I/O port address</td>
    </tr>
    <tr>
      <td>ESI</td>
      <td align="center"><img border="0" src="../../images/arrow_lr.gif" width="23" height="8"></td>
      <td>handler to call when I/O access attempted???</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0091h</b> </p>
</td>
<td valign="top"> hook device V86 API </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0092h</b> </p>
</td>
<td valign="top"> hook device PM API </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0093h</b> </p>
</td>
<td valign="top"> system control (see also <a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/57/26.html">#02657</a>) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0094h</b> </p>
</td>
<td valign="top"> simulate I/O </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0095h</b> </p>
</td>
<td valign="top"> install multiple I/O handlers </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0096h</b> </p>
</td>
<td valign="top"> install I/O handler
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td align="center">=</td>
      <td>I/O port address</td>
    </tr>
    <tr>
      <td>ESI</td>
      <td align="center"><img border="0" src="../../images/arrow_lr.gif" width="23" height="8"></td>
      <td>handler to call when I/O access attempted???</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0097h</b> </p>
</td>
<td valign="top"> enable global trapping
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td>=</td>
      <td>I/O port address</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0098h</b> </p>
</td>
<td valign="top"> enable local trapping
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td>=</td>
      <td>I/O port address</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0099h</b> </p>
</td>
<td valign="top"> disable global trapping
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td>=</td>
      <td>I/O port address</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Ah</b> </p>
</td>
<td valign="top"> disable local trapping
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>DX</td>
      <td>=</td>
      <td>I/O port address</td>
    </tr>
  </table>
 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Bh</b> </p>
</td>
<td valign="top"> create list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Ch</b> </p>
</td>
<td valign="top"> destroy list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Dh</b> </p>
</td>
<td valign="top"> allocate list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Eh</b> </p>
</td>
<td valign="top"> attach list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>009Fh</b> </p>
</td>
<td valign="top"> attach list tail </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A0h</b> </p>
</td>
<td valign="top"> insert into list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A1h</b> </p>
</td>
<td valign="top"> remove from list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A2h</b> </p>
</td>
<td valign="top"> deallocate list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A3h</b> </p>
</td>
<td valign="top"> get first item in list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A4h</b> </p>
</td>
<td valign="top"> get next item in list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A5h</b> </p>
</td>
<td valign="top"> remove first item in list </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A6h</b> </p>
</td>
<td valign="top"> add instance item </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A7h</b> </p>
</td>
<td valign="top"> allocate device callback area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A8h</b> </p>
</td>
<td valign="top"> allocate global V86 data area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00A9h</b> </p>
</td>
<td valign="top"> allocate temporary V86 data area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00AAh</b> </p>
</td>
<td valign="top"> free temporary V86 data area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00ABh</b> </p>
</td>
<td valign="top"> get decimal integer from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00ACh</b> </p>
</td>
<td valign="top"> convert decimal string to integer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00ADh</b> </p>
</td>
<td valign="top"> get fixed-point number from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00AEh</b> </p>
</td>
<td valign="top"> convert fixed-point string </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00AFh</b> </p>
</td>
<td valign="top"> get hex integer from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B0h</b> </p>
</td>
<td valign="top"> convert hex string to integer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B1h</b> </p>
</td>
<td valign="top"> get boolean value from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B2h</b> </p>
</td>
<td valign="top"> convert boolean string </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B3h</b> </p>
</td>
<td valign="top"> get string from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B4h</b> </p>
</td>
<td valign="top"> get next string from profile </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B5h</b> </p>
</td>
<td valign="top"> get environment string </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B6h</b> </p>
</td>
<td valign="top"> get exec path </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B7h</b> </p>
</td>
<td valign="top"> get configuration directory </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B8h</b> </p>
</td>
<td valign="top"> open file </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00B9h</b> </p>
</td>
<td valign="top"> get PSP segment </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BAh</b> </p>
</td>
<td valign="top"> get DOS vectors </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BBh</b> </p>
</td>
<td valign="top"> get machine information </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BCh</b> </p>
</td>
<td valign="top"> get/set HMA information </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BDh</b> </p>
</td>
<td valign="top"> set system exit code </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BEh</b> </p>
</td>
<td valign="top"> fatal error handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00BFh</b> </p>
</td>
<td valign="top"> fatal memory error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C0h</b> </p>
</td>
<td valign="top"> update system clock </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C1h</b> </p>
</td>
<td valign="top"> test if debugger installed </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C2h</b> </p>
</td>
<td valign="top"> output debugger string </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C3h</b> </p>
</td>
<td valign="top"> output debugger character </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C4h</b> </p>
</td>
<td valign="top"> input debugger character </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C5h</b> </p>
</td>
<td valign="top"> debugger convert hex to binary </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C6h</b> </p>
</td>
<td valign="top"> debugger convert hex to decimal </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C7h</b> </p>
</td>
<td valign="top"> debugger test if valid handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C8h</b> </p>
</td>
<td valign="top"> validate client pointer </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00C9h</b> </p>
</td>
<td valign="top"> test reentry </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CAh</b> </p>
</td>
<td valign="top"> queue debugger string </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CBh</b> </p>
</td>
<td valign="top"> log procedure call </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CCh</b> </p>
</td>
<td valign="top"> debugger test current VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CDh</b> </p>
</td>
<td valign="top"> get PM interrupt type </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CEh</b> </p>
</td>
<td valign="top"> set PM interrupt type </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00CFh</b> </p>
</td>
<td valign="top"> get last updated system time </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D0h</b> </p>
</td>
<td valign="top"> get last updated VM execution time </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D1h</b> </p>
</td>
<td valign="top"> test if double-byte character-set lead byte </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D2h</b> </p>
</td>
<td valign="top"> _AddFreePhysPage </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D3h</b> </p>
</td>
<td valign="top"> _PageResetHandlePAddr </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D4h</b> </p>
</td>
<td valign="top"> _SetLastV86Page </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D5h</b> </p>
</td>
<td valign="top"> _GetLastV86Page </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D6h</b> </p>
</td>
<td valign="top"> _MapFreePhysReg </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D7h</b> </p>
</td>
<td valign="top"> _UnmapFreePhysReg </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D8h</b> </p>
</td>
<td valign="top"> _XchgFreePhysReg </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00D9h</b> </p>
</td>
<td valign="top"> _SetFreePhysRegCalBk </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DAh</b> </p>
</td>
<td valign="top"> get next arena (MCB) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DBh</b> </p>
</td>
<td valign="top"> get name of ugly TSR </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DCh</b> </p>
</td>
<td valign="top"> get debug options </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DDh</b> </p>
</td>
<td valign="top"> set physical HMA alias </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DEh</b> </p>
</td>
<td valign="top"> _GetGlblRng0V86IntBase </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00DFh</b> </p>
</td>
<td valign="top"> add global V86 data area </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E0h</b> </p>
</td>
<td valign="top"> get/set detailed VM error </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E1h</b> </p>
</td>
<td valign="top"> Is_Debug_Chr </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E2h</b> </p>
</td>
<td valign="top"> clear monochrome screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E3h</b> </p>
</td>
<td valign="top"> output character to mono screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E4h</b> </p>
</td>
<td valign="top"> output string to mono screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E5h</b> </p>
</td>
<td valign="top"> set current position on mono screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E6h</b> </p>
</td>
<td valign="top"> get current position on mono screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E7h</b> </p>
</td>
<td valign="top"> get character from mono screen </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E8h</b> </p>
</td>
<td valign="top"> locate byte in ROM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00E9h</b> </p>
</td>
<td valign="top"> hook invalid page fault </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00EAh</b> </p>
</td>
<td valign="top"> unhook invalid page fault </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00EBh</b> </p>
</td>
<td valign="top"> set delete on exit file </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00ECh</b> </p>
</td>
<td valign="top"> close VM </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00EDh</b> </p>
</td>
<td valign="top"> &quot;Enable_Touch_1st_Meg&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00EEh</b> </p>
</td>
<td valign="top"> &quot;Disable_Touch_1st_Meg&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00EFh</b> </p>
</td>
<td valign="top"> install exception handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F0h</b> </p>
</td>
<td valign="top"> remove exception handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F1h</b> </p>
</td>
<td valign="top"> &quot;Get_Crit_Status_No_Block&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F2h</b> </p>
</td>
<td valign="top"> &quot;_Schedule_VM_RTI_Event&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F3h</b> </p>
</td>
<td valign="top"> &quot;_Trace_Out_Service&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F4h</b> </p>
</td>
<td valign="top"> &quot;_Debug_Out_Service&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F5h</b> </p>
</td>
<td valign="top"> &quot;_Debug_Flags_Service&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F6h</b> </p>
</td>
<td valign="top"> VMM add import module name </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F7h</b> </p>
</td>
<td valign="top"> VMM Add DDB </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F8h</b> </p>
</td>
<td valign="top"> VMM Remove DDB </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00F9h</b> </p>
</td>
<td valign="top"> get thread time slice priority </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FAh</b> </p>
</td>
<td valign="top"> set thread time slice priority </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FBh</b> </p>
</td>
<td valign="top"> schedule thread event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FCh</b> </p>
</td>
<td valign="top"> cancel thread event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FDh</b> </p>
</td>
<td valign="top"> set thread timeout </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FEh</b> </p>
</td>
<td valign="top"> set asynchronous timeout </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>00FFh</b> </p>
</td>
<td valign="top"> &quot;_AllocatreThreadDataSlot&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0100h</b> </p>
</td>
<td valign="top"> &quot;_FreeThreadDataSlot&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0101h</b> </p>
</td>
<td valign="top"> create Mutex </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0102h</b> </p>
</td>
<td valign="top"> destroy Mutex </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0103h</b> </p>
</td>
<td valign="top"> get Mutex owner </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0104h</b> </p>
</td>
<td valign="top"> call when thread switched </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0105h</b> </p>
</td>
<td valign="top"> create thread </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0106h</b> </p>
</td>
<td valign="top"> start thread </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0107h</b> </p>
</td>
<td valign="top"> terminate thread </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0108h</b> </p>
</td>
<td valign="top"> get current thread handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0109h</b> </p>
</td>
<td valign="top"> test current thread handle </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Ah</b> </p>
</td>
<td valign="top"> &quot;Get_Sys_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Bh</b> </p>
</td>
<td valign="top"> &quot;Test_Sys_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Ch</b> </p>
</td>
<td valign="top"> &quot;Validate_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Dh</b> </p>
</td>
<td valign="top"> &quot;Get_Initial_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Eh</b> </p>
</td>
<td valign="top"> &quot;Test_Initial_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>010Fh</b> </p>
</td>
<td valign="top"> &quot;Debug_Test_Valid_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0110h</b> </p>
</td>
<td valign="top"> &quot;Debug_Test_Cur_Thread&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0111h</b> </p>
</td>
<td valign="top"> &quot;VMM_GetSystemInitState&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0112h</b> </p>
</td>
<td valign="top"> &quot;Cancel_Call_When_Thread_Switched&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0113h</b> </p>
</td>
<td valign="top"> &quot;Get_Next_Thread_Handle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0114h</b> </p>
</td>
<td valign="top"> &quot;Adjust_Thread_Exec_Priority&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0115h</b> </p>
</td>
<td valign="top"> &quot;_Deallocate_Device_CB_Area&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0116h</b> </p>
</td>
<td valign="top"> &quot;Remove_IO_Handler&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0117h</b> </p>
</td>
<td valign="top"> &quot;Remove_Mult_IO_Handlers&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0118h</b> </p>
</td>
<td valign="top"> unhook V86 interrupt chain </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0119h</b> </p>
</td>
<td valign="top"> unhook V86 fault handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Ah</b> </p>
</td>
<td valign="top"> unhook PM fault handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Bh</b> </p>
</td>
<td valign="top"> unhook VMM fault handler </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Ch</b> </p>
</td>
<td valign="top"> unhook device service </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Dh</b> </p>
</td>
<td valign="top"> &quot;_PageReserve&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Eh</b> </p>
</td>
<td valign="top"> &quot;_PageCommit&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>011Fh</b> </p>
</td>
<td valign="top"> &quot;_PageDecommit&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0120h</b> </p>
</td>
<td valign="top"> &quot;_PagerRegister&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0121h</b> </p>
</td>
<td valign="top"> &quot;_PagerQuery&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0122h</b> </p>
</td>
<td valign="top"> &quot;_PagerDeregister&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0123h</b> </p>
</td>
<td valign="top"> &quot;_ContextCreate&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0124h</b> </p>
</td>
<td valign="top"> &quot;_ContextDestroy&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0125h</b> </p>
</td>
<td valign="top"> &quot;_PageAttach&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0126h</b> </p>
</td>
<td valign="top"> &quot;_PageFlush&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0127h</b> </p>
</td>
<td valign="top"> &quot;_SignalID&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0128h</b> </p>
</td>
<td valign="top"> &quot;_PageCommitPhys&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0129h</b> </p>
</td>
<td valign="top"> &quot;_Register_Win32_Services&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Ah</b> </p>
</td>
<td valign="top"> &quot;Cancel_Call_When_Not_Critical&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Bh</b> </p>
</td>
<td valign="top"> &quot;Cancel_Call_When_Idle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Ch</b> </p>
</td>
<td valign="top"> &quot;Cancel_Call_When_Task_Switched&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Dh</b> </p>
</td>
<td valign="top"> &quot;_Debug_Printf_Service&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Eh</b> </p>
</td>
<td valign="top"> enter Mutex </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>012Fh</b> </p>
</td>
<td valign="top"> leave Mutex </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0130h</b> </p>
</td>
<td valign="top"> simulate VM I/O </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0131h</b> </p>
</td>
<td valign="top"> &quot;Signal_Semaphore_No_Switch&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0132h</b> </p>
</td>
<td valign="top"> &quot;_MMSwitchContext&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0133h</b> </p>
</td>
<td valign="top"> &quot;_MMModifyPermissions&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0134h</b> </p>
</td>
<td valign="top"> &quot;_MMQuery&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0135h</b> </p>
</td>
<td valign="top"> &quot;_EnterMustComplete&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0136h</b> </p>
</td>
<td valign="top"> &quot;_LeaveMustComplete&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0137h</b> </p>
</td>
<td valign="top"> &quot;_ResumeExecMustComplete&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0138h</b> </p>
</td>
<td valign="top"> get thread termination status </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0139h</b> </p>
</td>
<td valign="top"> &quot;_GetInstanceInfo&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Ah</b> </p>
</td>
<td valign="top"> &quot;_ExecIntMustComplete&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Bh</b> </p>
</td>
<td valign="top"> &quot;_ExecVxDIntMustComplete&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Ch</b> </p>
</td>
<td valign="top"> begin V86 serialization </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Dh</b> </p>
</td>
<td valign="top"> unhook V86 page </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Eh</b> </p>
</td>
<td valign="top"> &quot;VMM_GetVxDLocationList&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>013Fh</b> </p>
</td>
<td valign="top"> &quot;VMM_GetDDBList&quot; get start of VxD chain (see also <a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/57/26.html">#02657</a>
  at INT 2F/AX=1684h/BX=0017h) </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0140h</b> </p>
</td>
<td valign="top"> unhook NMI event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0141h</b> </p>
</td>
<td valign="top"> &quot;Get_Instanced_V86_Int_Vector&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0142h</b> </p>
</td>
<td valign="top"> get or set real DOS PSP </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0143h</b> </p>
</td>
<td valign="top"> call priority thread event </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0144h</b> </p>
</td>
<td valign="top"> &quot;Get_System_Time_Address&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0145h</b> </p>
</td>
<td valign="top"> &quot;Get_Crit_Status_Thread&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0146h</b> </p>
</td>
<td valign="top"> &quot;Get_DDB&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0147h</b> </p>
</td>
<td valign="top"> &quot;Directed_Sys_Control&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0148h</b> </p>
</td>
<td valign="top"> &quot;_RegOpenKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0149h</b> </p>
</td>
<td valign="top"> &quot;_RegCloseKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Ah</b> </p>
</td>
<td valign="top"> &quot;_RegCreateKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Bh</b> </p>
</td>
<td valign="top"> &quot;_RegDeleteKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Ch</b> </p>
</td>
<td valign="top"> &quot;_RegEnumKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Dh</b> </p>
</td>
<td valign="top"> &quot;_RegQueryValue&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Eh</b> </p>
</td>
<td valign="top"> &quot;_RegSetValue&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>014Fh</b> </p>
</td>
<td valign="top"> &quot;_RegDeleteValue&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0150h</b> </p>
</td>
<td valign="top"> &quot;_RegEnumValue&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0151h</b> </p>
</td>
<td valign="top"> &quot;_RegQueryValueEx&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0152h</b> </p>
</td>
<td valign="top"> &quot;_RegSetValueEx&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0153h</b> </p>
</td>
<td valign="top"> &quot;_CallRing3&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0154h</b> </p>
</td>
<td valign="top"> &quot;Exec_PM_Int&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0155h</b> </p>
</td>
<td valign="top"> &quot;_RegFlushKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0156h</b> </p>
</td>
<td valign="top"> &quot;_PageCommitContig&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0157h</b> </p>
</td>
<td valign="top"> &quot;_GetCurrentContext&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0158h</b> </p>
</td>
<td valign="top"> &quot;_LocalizeSprintf&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0159h</b> </p>
</td>
<td valign="top"> &quot;_LocalizeStackSprintf&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Ah</b> </p>
</td>
<td valign="top"> &quot;Call_Restricted_Event&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Bh</b> </p>
</td>
<td valign="top"> &quot;Cancel_Restricted_Event&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Ch</b> </p>
</td>
<td valign="top"> &quot;Register_PEF_Provider&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Dh</b> </p>
</td>
<td valign="top"> &quot;_GetPhysPageInfo&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Eh</b> </p>
</td>
<td valign="top"> &quot;_RegQueryInfoKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>015Fh</b> </p>
</td>
<td valign="top"> &quot;MemArb_Reserve_Pages&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0160h</b> </p>
</td>
<td valign="top"> &quot;Time_Slice_Sys_VM_Idle&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0161h</b> </p>
</td>
<td valign="top"> &quot;Time_Slice_Sleep&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0162h</b> </p>
</td>
<td valign="top"> &quot;Boost_With_Decay&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0163h</b> </p>
</td>
<td valign="top"> &quot;Set_Inversion_Pri&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0164h</b> </p>
</td>
<td valign="top"> &quot;Reset_Inversion_Pri&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0165h</b> </p>
</td>
<td valign="top"> &quot;Release_Inversion_Pri&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0166h</b> </p>
</td>
<td valign="top"> &quot;Get_Thread_Win32_Pri&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0167h</b> </p>
</td>
<td valign="top"> &quot;Set_Thread_Win32_Pri&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0168h</b> </p>
</td>
<td valign="top"> &quot;Set_Thread_Static_Boost&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0169h</b> </p>
</td>
<td valign="top"> &quot;Set_VM_Static_Boost&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Ah</b> </p>
</td>
<td valign="top"> &quot;Release_Inversion_Pri_ID&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Bh</b> </p>
</td>
<td valign="top"> &quot;Attach_Thread_To_Group&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Ch</b> </p>
</td>
<td valign="top"> &quot;Detach_Thread_From_Group&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Dh</b> </p>
</td>
<td valign="top"> &quot;Set_Group_Static_Boost&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Eh</b> </p>
</td>
<td valign="top"> &quot;_GetRegistryPath&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>016Fh</b> </p>
</td>
<td valign="top"> &quot;_GetRegistryKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0170h</b> </p>
</td>
<td valign="top"> &quot;_CleanupNestedExec&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0171h</b> </p>
</td>
<td valign="top"> &quot;_RegRemapPreDefKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0172h</b> </p>
</td>
<td valign="top"> &quot;End_V86_Serialization&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0173h</b> </p>
</td>
<td valign="top"> &quot;_Assert_Range&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0174h</b> </p>
</td>
<td valign="top"> &quot;_Sprintf&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0175h</b> </p>
</td>
<td valign="top"> &quot;_PageChangePager&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0176h</b> </p>
</td>
<td valign="top"> &quot;_RegCreateDynKey&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0177h</b> </p>
</td>
<td valign="top"> &quot;RegQMulti&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0178h</b> </p>
</td>
<td valign="top"> &quot;Boost_Thread_With_VM&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0179h</b> </p>
</td>
<td valign="top"> &quot;Get_Boot_Flags&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Ah</b> </p>
</td>
<td valign="top"> &quot;Set_Boot_Flags&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Bh</b> </p>
</td>
<td valign="top"> &quot;_lstrcpyn&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Ch</b> </p>
</td>
<td valign="top"> &quot;_lstrlen&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Dh</b> </p>
</td>
<td valign="top"> &quot;_lmemcpy&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Eh</b> </p>
</td>
<td valign="top"> &quot;_GetVxDName&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>017Fh</b> </p>
</td>
<td valign="top"> &quot;Force_Mutexes_Free&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0180h</b> </p>
</td>
<td valign="top"> &quot;Restore_Forced_Mutexes&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0181h</b> </p>
</td>
<td valign="top"> &quot;_AddReclaimableItem&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0182h</b> </p>
</td>
<td valign="top"> &quot;_SetReclaimableItem&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0183h</b> </p>
</td>
<td valign="top"> &quot;_EnumReclaimableItem&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0184h</b> </p>
</td>
<td valign="top"> &quot;Time_Slice_Wake_Sys_VM&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0185h</b> </p>
</td>
<td valign="top"> &quot;VMM_Replace_Global_Environment&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0186h</b> </p>
</td>
<td valign="top"> &quot;Begin_Non_Serial_Nest_V86_Exec&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0187h</b> </p>
</td>
<td valign="top"> &quot;Get_Nest_Exec_Status&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0188h</b> </p>
</td>
<td valign="top"> &quot;Open_Boot_Log&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0189h</b> </p>
</td>
<td valign="top"> &quot;Write_Boot_Log&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Ah</b> </p>
</td>
<td valign="top"> &quot;Close_Boot_Log&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Bh</b> </p>
</td>
<td valign="top"> &quot;EnableDisable_Boot_Log&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Ch</b> </p>
</td>
<td valign="top"> &quot;_Call_On_My_Stack&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Dh</b> </p>
</td>
<td valign="top"> &quot;Get_Inst_V86_Int_Vec_Base&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Eh</b> </p>
</td>
<td valign="top"> &quot;_lstrcmpi&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>018Fh</b> </p>
</td>
<td valign="top"> &quot;_strupr&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0190h</b> </p>
</td>
<td valign="top"> &quot;Log_Fault_Call_Out&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0191h</b> </p>
</td>
<td valign="top"> &quot;_AtEventTime&quot; </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>0191h</b> </p>
</td>
<td valign="top"> ...last service for Windows95 SP1 </td>
</tr>
<tr>
<td valign="top" nowrap>
<p align="right"> <b>811Ch</b> </p>
</td>
<td valign="top"> unhook device service??? (called by KEYREMAP.VXD)
  <table border="1" cellspacing="0" cellpadding="3">
    <tr>
      <td>EAX</td>
      <td align="center">=</td>
      <td>service ID
        <table border="0" cellspacing="0" cellpadding="3">
          <tr>
            <td>high word</td>
            <td>=</td>
            <td>VxD ID</td>
          </tr>
          <tr>
            <td>low word</td>
            <td>=</td>
            <td>service number</td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td>ESI</td>
      <td align="center"><img border="0" src="../../images/arrow_lr.gif" width="23" height="8"></td>
      <td>handler</td>
    </tr>
  </table>
 </td>
</tr>
</table>
<hr>
<table border="3" cellpadding="3" cellspacing="3">
<tr>
<td valign="top" nowrap>
<p align="left"><b>See Also:</b></p>
</td>
<td valign="top">
<p align="left"> <a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/66/12.html">#01266</a>,<a href="file:///D:/Offline%20Explorer/www.delorie.com/djgpp/doc/rbinter/it/67/12.html">#01267</a>,INT
2F/AX=1684h/BX=0001h </p>
</td>
</tr>
</table>
<p> </p>
</body>
</html>
